"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useRecipients } from "@/hooks/useRecipients";
import { exportUtils } from "@/lib/export";
import {
  Download,
  FileText,
  FileSpreadsheet,
  Calendar,
  DollarSign,
  Users,
  Share2,
  Copy,
  Check,
} from "lucide-react";

export function ExportPage() {
  const { recipients, totalAmount, totalRecipients } = useRecipients();
  const [isExporting, setIsExporting] = useState(false);
  const [exportType, setExportType] = useState<"pdf" | "csv" | null>(null);
  const [customFilename, setCustomFilename] = useState("");
  const [copied, setCopied] = useState(false);

  const handleExport = async (type: "pdf" | "csv") => {
    if (recipients.length === 0) {
      alert("No recipients to export");
      return;
    }

    setIsExporting(true);
    setExportType(type);

    try {
      const filename = customFilename.trim()
        ? `${customFilename}.${type === "pdf" ? "pdf" : "xlsx"}`
        : undefined;

      if (type === "pdf") {
        exportUtils.exportToPDF(recipients, filename);
      } else {
        exportUtils.exportToCSV(recipients, filename);
      }
    } catch (error) {
      console.error("Export error:", error);
      alert("Failed to export data. Please try again.");
    } finally {
      setIsExporting(false);
      setExportType(null);
    }
  };

  const generateSummaryText = () => {
    const currentDate = new Date().toLocaleDateString();
    return `eDuit Raya Distribution Summary

Date: ${currentDate}
Total Recipients: ${totalRecipients}
Total Amount: RM ${totalAmount.toFixed(2)}
Average Amount: RM ${
      totalRecipients > 0 ? (totalAmount / totalRecipients).toFixed(2) : "0.00"
    }

Recipients:
${recipients
  .map((r, i) => `${i + 1}. ${r.name} - RM ${r.amount.toFixed(2)} (${r.note})`)
  .join("\n")}

Generated by eDuit Raya Splitter`;
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateSummaryText());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy:", error);
    }
  };

  if (recipients.length === 0) {
    return (
      <div className="text-center py-12">
        <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
        <h3 className="text-lg font-semibold mb-2">No data to export</h3>
        <p className="text-muted-foreground">
          Add some recipients first to export your duit raya distribution data.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Export Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Export Summary
          </CardTitle>
          <CardDescription>Overview of data ready for export</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <Users className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm font-medium">Recipients</span>
              </div>
              <p className="text-2xl font-bold">{totalRecipients}</p>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <DollarSign className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm font-medium">Total Amount</span>
              </div>
              <p className="text-2xl font-bold">RM {totalAmount.toFixed(2)}</p>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <DollarSign className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm font-medium">Average</span>
              </div>
              <p className="text-2xl font-bold">
                RM{" "}
                {totalRecipients > 0
                  ? (totalAmount / totalRecipients).toFixed(2)
                  : "0.00"}
              </p>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm font-medium">Export Date</span>
              </div>
              <p className="text-sm font-medium">
                {new Date().toLocaleDateString()}
              </p>
            </div>
          </div>

          <Separator className="my-6" />

          {/* Recent Recipients Preview */}
          <div>
            <h4 className="font-medium mb-4">Recipients Preview (Top 5)</h4>
            <div className="space-y-2">
              {recipients.slice(0, 5).map((recipient, index) => (
                <div
                  key={recipient.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    <Badge variant="outline">{index + 1}</Badge>
                    <div>
                      <p className="font-medium">{recipient.name}</p>
                      <p className="text-sm text-muted-foreground">
                        {recipient.note}
                      </p>
                    </div>
                  </div>
                  <Badge>RM {recipient.amount.toFixed(2)}</Badge>
                </div>
              ))}
              {recipients.length > 5 && (
                <p className="text-sm text-muted-foreground text-center py-2">
                  ... and {recipients.length - 5} more recipients
                </p>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Export Options */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* PDF Export */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Export as PDF
            </CardTitle>
            <CardDescription>
              Generate a formatted PDF document with all recipient details
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="pdf-filename">Custom filename (optional)</Label>
              <Input
                id="pdf-filename"
                placeholder="my-duit-raya-list"
                value={customFilename}
                onChange={(e) => setCustomFilename(e.target.value)}
              />
            </div>
            <Button
              onClick={() => handleExport("pdf")}
              disabled={isExporting}
              className="w-full"
            >
              {isExporting && exportType === "pdf" ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  Generating PDF...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Download className="h-4 w-4" />
                  Download PDF
                </div>
              )}
            </Button>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>• Formatted table with all recipient details</li>
              <li>• Summary totals and statistics</li>
              <li>• Professional layout for printing</li>
            </ul>
          </CardContent>
        </Card>

        {/* CSV Export */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileSpreadsheet className="h-5 w-5" />
              Export as Excel/CSV
            </CardTitle>
            <CardDescription>
              Export to Excel spreadsheet format for further analysis
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="csv-filename">Custom filename (optional)</Label>
              <Input
                id="csv-filename"
                placeholder="my-duit-raya-data"
                value={customFilename}
                onChange={(e) => setCustomFilename(e.target.value)}
              />
            </div>
            <Button
              onClick={() => handleExport("csv")}
              disabled={isExporting}
              className="w-full"
              variant="outline"
            >
              {isExporting && exportType === "csv" ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
                  Generating Excel...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Download className="h-4 w-4" />
                  Download Excel
                </div>
              )}
            </Button>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>• Excel format (.xlsx) compatible</li>
              <li>• Editable spreadsheet data</li>
              <li>• Easy to import into other tools</li>
            </ul>
          </CardContent>
        </Card>
      </div>

      {/* Quick Share */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Share2 className="h-5 w-5" />
            Quick Share
          </CardTitle>
          <CardDescription>
            Copy summary text to clipboard for quick sharing
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="bg-muted p-4 rounded-lg">
              <pre className="text-sm whitespace-pre-wrap font-mono">
                {generateSummaryText()}
              </pre>
            </div>
            <Button
              onClick={copyToClipboard}
              variant="outline"
              className="w-full"
            >
              {copied ? (
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4" />
                  Copied to Clipboard!
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Copy className="h-4 w-4" />
                  Copy Summary Text
                </div>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
